%%{
/*
 * Copyright (c) 2019 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
 
/*
 *  ======== phygroup.c.xdt ========
 */

/* Common utility functions */
const Common = system.getScript("/ti/devices/radioconfig/radioconfig_common.js");
    
/* Radio code export configuration */
const CodeExportHandler = Common.getScript("code_export_param");

/* RF Command Handler */
const CmdHandler = Common.getScript("cmd_handler.js");

/* Target handler */
const TargetHandler = Common.getScript("target_handler.js");

/* PHY header */
const phyHeader = system.getTemplate("/ti/devices/radioconfig/templates/phyheader.xdt");

/* RadioConfig instances */
const module = args[0];
const phyGroup = args[1];
const instances = module.$instances;

%%}
%
% for (let i = 0; i < instances.length; i++) {
%   const inst = instances[i];
%   const ceConfig = inst.codeExportConfig;
%   const phy = Common.getPhyType(inst);
%   const cmdHandler = CmdHandler.get(phyGroup, phy);
%   cmdHandler.updateRfCommands(inst);
%   const frequency = cmdHandler.getFrequency();
%   const paramSummary = cmdHandler.getParameterSummary(inst);
%   const symNames = CodeExportHandler.getSymNames(ceConfig, phy);
%   const prop24 = phyGroup === Common.PHY_PROP && frequency > 2400;
%   const txPowerCode = TargetHandler.generateTxPowerCode(frequency, symNames, prop24);
%   const multiProtocol = ceConfig.useMulti;
%   const patchCode = cmdHandler.generatePatchCode(multiProtocol);
%   const legacy = ceConfig.symGenMethod === "Legacy";
%   const qualifier = ceConfig.useConst ? 'const ' : '';
%   const customOverride = [
%       {
%           "path": ceConfig.stackOverride,
%           "macro": ceConfig.stackOverrideMacro
%       },
%       {
%           "path": ceConfig.appOverride,
%           "macro": ceConfig.appOverrideMacro
%       }
%   ];
`phyHeader(cmdHandler)`
// Parameter summary
`paramSummary`
// TI-RTOS RF Mode Object
RF_Mode `symNames.rfMode` =
{
`patchCode`
};

% if (txPowerCode !== null) {
`txPowerCode`
% }
% const overrideCode = cmdHandler.generateOverrideCode(symNames.overrides, customOverride);
`overrideCode`

% const cmds = cmdHandler.getCommands();
% for (let j = 0; j < cmds.length; j++) {
%   const cmd = cmds[j];
%   const cmdName = cmdHandler.getCommandName(cmd);
%   const cmdKey = _.camelCase(cmdName);
%   if (cmdKey in symNames) {
%     const cmdDescr = cmdHandler.getCommandDescription(cmdName);
%     const cmdVarName = symNames[cmdKey];
%     const rfCmdCode = cmdHandler.generateRfCmdCode(cmd, symNames, legacy);
%     if (rfCmdCode.rfPar.length > 0) {
%       const ps = rfCmdCode.parStructName;
%       const tn = rfCmdCode.parTypeName;
// Structure for `cmdName`.pParam
rfc_`tn`_t `ps` =
{
`rfCmdCode.rfPar`
};

%     }
// `cmdName`
// `cmdDescr`
`qualifier`rfc_`cmdName`_t `cmdVarName` =
{
`rfCmdCode.rfCmd`
};

%     }
%   }
% }
