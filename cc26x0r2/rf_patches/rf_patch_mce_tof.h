/******************************************************************************
*  Filename:       rf_patch_mce_tof.h
*  Revised:        $Date: 2019-04-29 17:29:16 +0200 (Mo, 29 Apr 2019) $
*  Revision:       $Revision: 19024 $
*
*  Description: RF core patch for supporting time-of-flight radio measurements in CC2640R2F
*
*  Copyright (c) 2015-2019, Texas Instruments Incorporated
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without
*  modification, are permitted provided that the following conditions are met:
*
*  1) Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2) Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3) Neither the name of the ORGANIZATION nor the names of its contributors may
*     be used to endorse or promote products derived from this software without
*     specific prior written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
*  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
*  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
*  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
*  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
*  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
*  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
*  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
*  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
*  POSSIBILITY OF SUCH DAMAGE.
*
******************************************************************************/

#ifndef _RF_PATCH_MCE_TOF_H
#define _RF_PATCH_MCE_TOF_H

#include <stdint.h>
#include "../inc/hw_types.h"

#ifndef MCE_PATCH_TYPE
#define MCE_PATCH_TYPE static const uint32_t
#endif

#ifndef PATCH_FUN_SPEC
#define PATCH_FUN_SPEC static inline
#endif

#ifndef RFC_MCERAM_BASE
#define RFC_MCERAM_BASE 0x21008000
#endif

#ifndef MCE_PATCH_MODE
#define MCE_PATCH_MODE 0
#endif

MCE_PATCH_TYPE patchTofMce[500] = { 
   0x00036052,
   0x00f1000f,
   0x00000000,
   0x000c8000,
   0x00000000,
   0x0c650000,
   0x80000000,
   0x00008012,
   0x0b1e0000,
   0x00000590,
   0x00000000,
   0x00ff0000,
   0x001f0000,
   0x00463737,
   0xfe6b2840,
   0xdeade8ca,
   0x00000000,
   0x00000000,
   0x00000000,
   0x00000000,
   0x00000000,
   0x00000000,
   0x00000000,
   0x00000000,
   0x00000000,
   0x07d00011,
   0x6fdd2fea,
   0x0fb00ff0,
   0xf80f0003,
   0x001f007f,
   0x8010005a,
   0x01900000,
   0x40000800,
   0x3162c102,
   0x8150c001,
   0x404a1e00,
   0x604c1a10,
   0x1a101020,
   0x6e236f13,
   0x16121611,
   0x7000684c,
   0x67e2c030,
   0x72487220,
   0x7303a32d,
   0x72037305,
   0x73067304,
   0x73767204,
   0xc7c07276,
   0x00018001,
   0x90109001,
   0x90010801,
   0x720d720c,
   0xb0c0720e,
   0xa0c07100,
   0x7218b0f0,
   0x10208132,
   0x06703952,
   0x16300020,
   0x14011101,
   0x60876c01,
   0x60b36095,
   0x621c616d,
   0x60876087,
   0x60876087,
   0x60b36095,
   0x621c616d,
   0x60876087,
   0xc0406087,
   0x608f67e2,
   0x67e2c050,
   0x1220608d,
   0x12106090,
   0x00108181,
   0xb0709180,
   0xc0116069,
   0xc560c282,
   0x6f131820,
   0x16116e23,
   0x68991612,
   0x97e07bf0,
   0x8131c022,
   0x18123981,
   0x9862d060,
   0x1e0167e2,
   0x7c00408f,
   0x7bd097e0,
   0x7be09350,
   0x7c109300,
   0xb33092d0,
   0x670c608f,
   0xc0706793,
   0xb5a091c0,
   0xb7646726,
   0x6743b203,
   0x8724a5a0,
   0x87349454,
   0x8ad49464,
   0x86149434,
   0x8ab09444,
   0x40ca2200,
   0xb110b0e0,
   0xb0c5b0c0,
   0xb0f0b116,
   0x2a007b50,
   0xc0f19060,
   0x40d51e0e,
   0x97811611,
   0xc037b762,
   0xa760b041,
   0xb116b0e6,
   0x87247311,
   0x87349434,
   0x8ad49444,
   0xb0e08613,
   0xc070b110,
   0xb0f567e2,
   0xa760c031,
   0xb0737100,
   0x7388b760,
   0x22008090,
   0x80b24562,
   0x45102262,
   0x41032222,
   0x94439434,
   0xb204b063,
   0x8961a760,
   0x3d808570,
   0x95511801,
   0x7311a0e0,
   0x225060e7,
   0x821040e7,
   0x450d2200,
   0x40e7220f,
   0x67b3100f,
   0x100f60e7,
   0x60e767c8,
   0xb207a763,
   0x8960936c,
   0x720ea0c5,
   0xb0f1b0c1,
   0x97877100,
   0x7100b0f1,
   0xc3f0b32d,
   0xb0749780,
   0x93b0c0d0,
   0x95e18791,
   0x7100b0f1,
   0xb88ab88b,
   0xc210b078,
   0xa2029780,
   0xb0f1b205,
   0xa32d7100,
   0x7276b06e,
   0xc080a0c1,
   0x8a6367e2,
   0x14238a82,
   0x8a928a74,
   0xcff21424,
   0x31430424,
   0x00343143,
   0xc8f09604,
   0xb2056942,
   0xa0e0b110,
   0xa0e6b116,
   0x7276b764,
   0xa003a5a0,
   0xc7c0a002,
   0x72039010,
   0x73057204,
   0x720e7306,
   0x720d720c,
   0x73107311,
   0xa202730f,
   0x8212b205,
   0x45591e02,
   0xc0907220,
   0x608f67e2,
   0xa202b205,
   0xd0a08792,
   0x67e29862,
   0x720c720e,
   0x730f7311,
   0xc00f6144,
   0xc0706793,
   0x672691c0,
   0xb064b013,
   0x22008ab0,
   0xb0e64177,
   0xb0c5b0c0,
   0xb116b0f1,
   0xb7627276,
   0x1e0ec0e1,
   0x16114182,
   0xc0379781,
   0xb202b041,
   0x67e2c0b0,
   0xa760c031,
   0x8591b0f5,
   0x419b1e01,
   0x698fc640,
   0x9861d0c0,
   0x720c67e2,
   0x720e720d,
   0x7310730f,
   0xb5947311,
   0x71007100,
   0xb760b073,
   0x8090b88e,
   0x46132200,
   0x226280b2,
   0x225045b2,
   0x82104188,
   0x45af2200,
   0x4188220f,
   0x67b3100f,
   0x100f6188,
   0x618867c8,
   0xb204b763,
   0x936cb889,
   0x720ea0c5,
   0x81807311,
   0x91802640,
   0xb0f1b0c1,
   0xb0417100,
   0xb0f19787,
   0xb32d7100,
   0x9780c3f0,
   0xc0d0b074,
   0xb0f193b0,
   0xb0787100,
   0x9780c210,
   0xb0f1a202,
   0xa32d7100,
   0xa760b06e,
   0x67d3a0c1,
   0x87e1c000,
   0x81701401,
   0x97811401,
   0x94548724,
   0x94648734,
   0x94348ad4,
   0x94448614,
   0xb0c6b0f6,
   0xb0f67100,
   0x8090a0c6,
   0x46132200,
   0x7276b012,
   0x2a208200,
   0x92002630,
   0xc0706743,
   0x89428601,
   0x3d823182,
   0x69f9c310,
   0xb0f1b064,
   0x7310730f,
   0x720e7311,
   0x720d720c,
   0x8212b205,
   0x45fc1e02,
   0x7276b764,
   0xa002a003,
   0x9010c7c0,
   0x72047203,
   0x73067305,
   0x67e2c0d0,
   0xc0e0608f,
   0xb20567e2,
   0x720c720e,
   0x730f7311,
   0x61fc7276,
   0x97c48454,
   0x846487d3,
   0x87d097c4,
   0xc1001403,
   0x84341803,
   0x87d297c4,
   0x97c48444,
   0x140287d0,
   0x1802c100,
   0x31133112,
   0x31823183,
   0x00323982,
   0x67939572,
   0xc070c00b,
   0x672691c0,
   0x67e2c0f0,
   0x725fb764,
   0x8ab0b013,
   0x42452200,
   0xb110b0e0,
   0x8438624b,
   0x84508449,
   0x94308461,
   0xb0f09441,
   0xb0e0b064,
   0xb0c0b0e6,
   0xb110b0c5,
   0x1e1bb116,
   0x72764258,
   0x72acb762,
   0xc070c0b7,
   0x425e1e0e,
   0xc0b71610,
   0xb2029780,
   0xc031b0f5,
   0x7100a760,
   0xb760b073,
   0x80b27388,
   0x46892262,
   0x46792222,
   0x22008090,
   0x22504708,
   0x82104260,
   0x46862200,
   0x4260220f,
   0x67b3100f,
   0x94386260,
   0xb0639449,
   0x85708961,
   0x18013d80,
   0xa7609551,
   0x7311a0e0,
   0x6260b204,
   0x67c8100f,
   0x1e1b6260,
   0xa765429f,
   0xb763b766,
   0x95f389a3,
   0x8a808a63,
   0x8a901403,
   0x14048a74,
   0x31433143,
   0x96040034,
   0x8180670c,
   0x91802650,
   0xa76362cf,
   0xb184b207,
   0x67e2c100,
   0xb8899787,
   0xa0c5936c,
   0xb0c1720e,
   0xb0f1b0f1,
   0xb32d7100,
   0x9780c3e0,
   0xc0d0b074,
   0x879193b0,
   0xb0f195e1,
   0xb0787100,
   0x9780c210,
   0xb205a202,
   0x7100b0f1,
   0xb06ea32d,
   0xa0c17276,
   0x8a808a63,
   0x8a901403,
   0x14048a74,
   0x31433143,
   0x96040034,
   0x6acdc8f0,
   0xbac062ef,
   0x94548724,
   0x94648734,
   0x94348ad4,
   0x94448614,
   0x8438c01b,
   0x84508449,
   0x94308461,
   0xb0e09441,
   0xb064b0f0,
   0x8212a202,
   0x42e22262,
   0xb0647220,
   0x7311b0f5,
   0xc410b202,
   0x67b36aec,
   0xb2056260,
   0x7276b764,
   0xa003a5a0,
   0xc7c0a002,
   0x72039010,
   0x73057204,
   0x720e7306,
   0x720c720d,
   0x73107311,
   0xa202730f,
   0x8212b205,
   0x46fb1e02,
   0x608f7220,
   0xa202b205,
   0x62f08792,
   0x97c48724,
   0x873487d3,
   0x87d097c4,
   0xc1001403,
   0x8ad41803,
   0x87d297c4,
   0x97c48614,
   0x140287d0,
   0x1802c100,
   0x31133112,
   0x31823183,
   0x00323982,
   0x70009572,
   0x22128212,
   0xb0064326,
   0xb012b016,
   0xb004b002,
   0x7b40b014,
   0x90509030,
   0x90407b50,
   0x730f9060,
   0x73117310,
   0xb0d7b107,
   0xb0727100,
   0xd680a0d7,
   0x67b36b3e,
   0x93b0c0b0,
   0xc1107000,
   0xbac067e2,
   0x9780c080,
   0xb760b761,
   0xb0f1b0c1,
   0x72767100,
   0xb0f1a0c1,
   0x72297b37,
   0x8ab29485,
   0xb003c0f3,
   0x8140b013,
   0x81609290,
   0xb0d09490,
   0x7100b100,
   0x47692202,
   0x94908450,
   0xb1009293,
   0x84607100,
   0xb1009490,
   0x84307100,
   0x92939490,
   0x7100b100,
   0x94908440,
   0x7100b100,
   0x94908ae0,
   0x7100b100,
   0xc0409486,
   0xb7619780,
   0xb0c1b760,
   0xa0d0b0f1,
   0x7100b100,
   0xa0c17276,
   0x85a0b0f1,
   0x43881e10,
   0x638fb205,
   0xb766a765,
   0x8200b763,
   0x26202a30,
   0xc0909200,
   0xaac06b90,
   0x72207000,
   0xc0f07218,
   0x722c9290,
   0x92a1c1f1,
   0x7b26c015,
   0x7b6c7b37,
   0x22008ab0,
   0x7b9043a6,
   0x7ba09400,
   0x63a89420,
   0x94007bb0,
   0x9486aac0,
   0x91b0c100,
   0x398e813e,
   0x1e0ec01d,
   0xc03d43b2,
   0x724e7000,
   0x7b82724f,
   0x9362b053,
   0x6bb9c3b0,
   0x88907388,
   0x88a194e0,
   0x7b7094f1,
   0x88939360,
   0x313388a4,
   0x31343d33,
   0x70003d34,
   0x88939881,
   0x313388a4,
   0x31343d63,
   0x94e33d64,
   0xb05394f4,
   0xc0007000,
   0x8a63c082,
   0x18348a74,
   0x4fdd1c24,
   0x4bdf1442,
   0x10d063e1,
   0xc00063e1,
   0x700018d0,
   0x88409850,
   0x47e32200,
   0x7000b830
};

PATCH_FUN_SPEC void rf_patch_mce_tof(void)
{
#ifdef __PATCH_NO_UNROLLING
   uint32_t i;
   for (i = 0; i < 500; i++) {
      HWREG(RFC_MCERAM_BASE + 4 * i) = patchTofMce[i];
   }
#else
   const uint32_t *pS = patchTofMce;
   volatile unsigned long *pD = &HWREG(RFC_MCERAM_BASE);
   uint32_t t1, t2, t3, t4, t5, t6, t7, t8;
   uint32_t nIterations = 62;

   do {
      t1 = *pS++;
      t2 = *pS++;
      t3 = *pS++;
      t4 = *pS++;
      t5 = *pS++;
      t6 = *pS++;
      t7 = *pS++;
      t8 = *pS++;
      *pD++ = t1;
      *pD++ = t2;
      *pD++ = t3;
      *pD++ = t4;
      *pD++ = t5;
      *pD++ = t6;
      *pD++ = t7;
      *pD++ = t8;
   } while (--nIterations);

   t1 = *pS++;
   t2 = *pS++;
   t3 = *pS++;
   t4 = *pS++;
   *pD++ = t1;
   *pD++ = t2;
   *pD++ = t3;
   *pD++ = t4;
#endif
}

#endif
